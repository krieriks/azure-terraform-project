name: Terraform CI/CD Pipeline

on:
  pull_request:
    branches:
      - feature/*  
  push:
    branches:
      - dev
      - staging
      - prod

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform-lint:
    name: Lint and Validate Terraform Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate -recursive

      - name: Run tflint
        run: tflint

      - name: Run tfsec
        run: tfsec .

  terraform-plan:
    name: Terraform Plan for Dev/Staging
    runs-on: ubuntu-latest
    needs: terraform-lint
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init -backend-config="key=${{ github.ref_name }}.tfstate"

      - name: Terraform Plan
        run: terraform plan -var-file="deployments/terraform.tfvars.${{ github.ref_name }}"

      - name: Save Plan Output
        id: tf_plan
        run: echo "::set-output name=plan_result::$(terraform plan -out=tfplan)"

  terraform-apply:
    name: Terraform Apply for Dev/Staging
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init -backend-config="key=${{ github.ref_name }}.tfstate"

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve -var-file="deployments/terraform.tfvars.${{ github.ref_name }}"

  terraform-prod-plan:
    name: Terraform Plan for Production
    runs-on: ubuntu-latest
    needs: terraform-lint
    if: github.ref == 'refs/heads/prod'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init -backend-config="key=prod.tfstate"

      - name: Terraform Plan
        run: terraform plan -var-file="deployments/terraform.tfvars.prod"

      - name: Save Plan Output
        id: tf_plan
        run: echo "::set-output name=plan_result::$(terraform plan -out=tfplan)"

  terraform-prod-apply:
    name: Manual Approval and Apply for Production
    runs-on: ubuntu-latest
    needs: terraform-prod-plan
    if: github.ref == 'refs/heads/prod'
    steps:
      - name: Require approval for Production Deploy
        uses: hmarr/auto-approve-action@v2
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init -backend-config="key=prod.tfstate"

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve -var-file="deployments/terraform.tfvars.prod"
